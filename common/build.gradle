plugins {
    id 'kotlin-multiplatform'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.dokka'
    id 'io.gitlab.arturbosch.detekt'
    id 'jacoco'
}

jacoco {
    toolVersion = jacoco_version
}

kotlin {
    jvm()

    js {
        browser {
            testTask {
                // Skip if CI
                enabled = "$System.env.CI".isEmpty()
            }
        }
        nodejs()
        tasks[compilations.main.compileKotlinTaskName].kotlinOptions.moduleKind = "umd"
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }
}

configurations.all {
    resolutionStrategy {
        eachDependency {
            if ("org.jacoco" == requested.group) {
                useVersion("0.8.7")
            }
        }
    }
}

task jacocoTestReportJvm(type: JacocoReport, group: 'jacoco') {
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def commonTree = fileTree(dir: "$buildDir/classes/kotlin/common/main", excludes: fileFilter)
    def jvmTree = fileTree(dir: "$buildDir/classes/kotlin/jvm/main", excludes: fileFilter)

    classDirectories.from(files(
            commonTree,
            jvmTree
    ))
    sourceDirectories.from(files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin"
    ))
    executionData.from(files("$buildDir/jacoco/jvmTest.exec"))

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task jacocoTestReportUnified(type: JacocoReport, dependsOn: ':android:build', group: 'jacoco') {
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def commonTree = fileTree(dir: "$buildDir/classes/kotlin/common/main", excludes: fileFilter)
    def jvmTree = fileTree(dir: "$buildDir/classes/kotlin/jvm/main", excludes: fileFilter)
    def androidTree = fileTree(dir: "${project(':android').buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.from(files(
            commonTree,
            jvmTree,
            androidTree
    ))
    sourceDirectories.from(files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin",
            "${project(':android').projectDir}/src/androidMain/kotlin"
    ))
    //noinspection ChangeToOperator
    executionData.from(files(
            "$buildDir/jacoco/jvmTest.exec",
            fileTree(dir: "${project(':android').buildDir}/jacoco", include: "*.exec")
    ))

    reports {
        xml.enabled = true
        xml.setDestination(file("$buildDir/reports/jacoco/unified/jacocoTestReportUnified.xml"))
        html.enabled = true
        html.setDestination(file("$buildDir/reports/jacoco/unified/html"))
    }
}

detekt {
    buildUponDefaultConfig = true
    input = files(
            "src/commonMain/kotlin",
            "src/jsMain/kotlin",
            "src/jvmMain/kotlin",
    )
    config = files("detekt.yml")
}

task cleanGhPages(type: Delete, group: 'build') {
    delete fileTree("gh-pages") {
        include '**'
        exclude 'CNAME'
        exclude 'index.html'
    }
    tasks.getByName("clean").dependsOn(cleanGhPages)
}

task dokkaGhPages(type: org.jetbrains.dokka.gradle.DokkaTask, group: 'documentation') {
    outputDirectory = file("${project.projectDir}/gh-pages")
    dokkaSourceSets {
        register("android") {
            displayName.set("Android")
            platform.set(org.jetbrains.dokka.Platform.jvm)
            sourceRoots.from(project(":android").kotlin.sourceSets.getByName("androidMain").kotlin.srcDirs)
        }
    }
}

task emptySourcesJar(type: Jar, group: 'publishing') {
    classifier('sources')
}
task emptyJavadocJar(type: Jar, group: 'publishing') {
    classifier('javadoc')
}

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaHtml, group: 'publishing') {
    classifier('javadoc')
    from "$buildDir/javadoc/common"
}

task dokkaJavadocJsJar(type: Jar, dependsOn: dokkaHtml, group: 'publishing') {
    classifier('javadoc')
    from "$buildDir/javadoc/js"
}

task dokkaJavadocJvmJar(type: Jar, dependsOn: dokkaHtml, group: 'publishing') {
    classifier('javadoc')
    from "$buildDir/javadoc/jvm"
}

publishing {
    publications.all { pub ->
        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                        organization POM_DEVELOPER_ORGANIZATION
                        organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                    }
                }
            }

            if (pub.artifactId == "arbor-android") {
                def dependenciesNode = asNode().appendNode('dependencies')
                appendDepNode(dependenciesNode, 'org.jetbrains.kotlin', 'kotlin-stdlib', kotlin_version, 'runtime')
                appendDepNode(dependenciesNode, 'com.ToxicBakery.logging', 'arbor-jvm', version, 'runtime')
            }
        }
    }

    task dokkaJavadocAndroidJar(
            type: Jar,
            dependsOn: project(":android").tasks.find { it.name == 'build' },
            group: 'publishing'
    ) {
        classifier('javadoc')
        from "${project(':android').buildDir}/libs/android-${project.version}-javadoc.jar"
    }

    task androidSourcesJar(type: Jar, group: 'publishing') {
        classifier('sources')
        from "${project(':android').buildDir}/libs/android-${project.version}-sources.jar"
    }

    afterEvaluate {
        publications {
            maven(MavenPublication) {
                artifactId "arbor-android"
                artifact "${project(':android').buildDir}/outputs/aar/android-release.aar"
                artifact dokkaJavadocAndroidJar
                artifact androidSourcesJar
            }
        }
        publications.getByName('js') {
            artifact dokkaJavadocJsJar
        }
        publications.getByName('jvm') {
            artifact dokkaJavadocJvmJar
        }
        publications.getByName('kotlinMultiplatform') {
            artifact dokkaJavadocCommonJar
        }
    }

    repositories {
        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"

        maven {
            url !version.contains("SNAPSHOT") ? releaseUrl : snapshotUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME') ?: ""
                password System.getenv('SONATYPE_PASSWORD') ?: ""
            }
        }
    }
}

static def appendDepNode(Node node, String groupId, String artifactId, String ver, String scope) {
    def newNode = node.appendNode('dependency')
    newNode.appendNode('groupId', groupId)
    newNode.appendNode('artifactId', artifactId)
    newNode.appendNode('version', ver)
    newNode.appendNode('scope', scope)
}

signing {
    required false
    sign publishing.publications
}

build.dependsOn 'jacocoTestReportJvm'
build.dependsOn 'jacocoTestReportUnified'

afterEvaluate {
    check.dependsOn('detekt')
}
